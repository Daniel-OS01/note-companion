version: "3.8"

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    restart: unless-stopped
    # NOTE: Ports are typically managed in the Dokploy UI.
    # Hardcoding them here can interfere with Dokploy's reverse proxy.
    ports:
      - 3000
      - 3010
    environment:
      # --- General & Database ---
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}

      # --- AI Provider API Keys & Bases ---
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OPENAI_API_BASE=${OPENAI_API_BASE}
      - GROQ_API_KEY=${GROQ_API_KEY}
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - GOOGLE_API_BASE=${GOOGLE_API_BASE}
      - MISTRAL_API_KEY=${MISTRAL_API_KEY}
      
      # --- Resource Limits ---
      - MAX_FILE_SIZE=26214400 # 25MB in bytes
      - MAX_TOKENS_PER_REQUEST=8000
      - RATE_LIMIT_REQUESTS=100
      - RATE_LIMIT_WINDOW=900000

    volumes:
      - app_data:/app/packages/web/uploads
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  db:
    image: postgres:16-alpine
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  app_data:
  db_data:
